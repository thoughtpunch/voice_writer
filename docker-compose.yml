services:
  db:
    image: postgres:16.4
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voice_writer"]
      interval: 10s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  web:
    build: .
    command: sh -c "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - ./.env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery:
    build: .
    command: celery -A voice_writer worker --loglevel=INFO --pool=solo
    volumes:
      - .:/app
    env_file:
      - ./.env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      web:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "4"     # Set CPU limit
          memory: "4G"  # Set Memory limit
        reservations:
          cpus: "2"     # Reserve CPU
          memory: "2G"  # Reserve Memory

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge